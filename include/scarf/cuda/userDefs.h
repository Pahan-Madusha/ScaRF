#ifndef USER_DEFINITIONS_HH
#define USER_DEFINITIONS_HH

#include <iostream>

//=========================== User definitions ================================


/**
 *  Parameter used in the split function on each node. In this particular case,
 *  this represents the index of feature vector to threshold the sample.
 */
typedef int Phi;


/**
 *  Sample structure defined by the user.
 */
/*
 *struct MySample {
 *
 *    typedef int LabelType;
 *    typedef float FeatureType;
 *
 *    // Feature vector
 *    FeatureType data[43];
 *
 *    // Label
 *    LabelType label;
 *
 *    // Simple operator [] for easy access
 *    __host__ __device__
 *    const FeatureType& operator[](size_t idx) const {return data[idx];}
 *    
 *    // TODO: this is nasty
 *    __host__ __device__
 *    operator int() const {return label;}
 *
 *    friend std::ostream &operator<<(std::ostream &os, MySample const &t) {
 *        os << t.label << ", " << t.data[0] << ", " << t.data[1] << std::endl;
 *        return os;
 *    }
 *};
 */


/**
 *  This function generate different parameters to be used in each decision
 *  tree as part of the training.
 */
Phi generateParameter(size_t n) {
    return rand() % 43;
}


/**
 *  This function gets a sample point and the parameter phi generated by the
 *  users 'generateParameter' function in order to compute the features for
 *  learning.
 */
__host__ __device__
float featureTransform(const MySample& x, Phi p) {
    return x[p];
}


//=============================================================================

#endif
